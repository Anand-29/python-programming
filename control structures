Control Structures-I
Q-1 : Amoeba Multiplication

The environmental eco club has discovered a new Amoeba that grows in the order of a Fibonacci series every month. They are exhibiting their amoeba in a national conference. They want to know the size of the amoeba at a particular time instant. If a particular month’s index is given, write a program to displays the amoeba’s size……??? For Example, The size of the amoeba on month 1, 2, 3, 4, 5, 6, ..will be 0, 1, 1, 2, 3, 5, 8 respectively. Input format: The first input containing an integer which denotes the number of the month Output format: Print the amoeba size. Refer the sample output for formatting.


Input (stdin)

7

Output (stdout)

8

Input (stdin)

3

Output (stdout)

1

 

Program:

n1=0

n2=1

num=int(input())

for i in range(2,num):

  n3=n1+n2

  n1=n2

  n2=n3

print(n3) 

Q-2 : Factorial

Write a program to determine whether 'n' is a factorial number or not. Factorial of a number is the product of all positive numbers from 1 to 'n'. Input format: The input containing an integer 'n' which denotes the given number. Output format: If the given number is factorial, print "Yes". Otherwise, print "No". Refer the sample output for formatting.


Input (stdin)

6

Output (stdout)

Yes

Input (stdin)

2

Output (stdout)

Yes

 

Program:

n=int(input())

i=1                

while(True):   

  if(n%i==0):

    n=n//i

  else:

    break

  i=i+1 

if(n==1):

  print("Yes")

else:

  print("No")

Q-3 : Lucas Sequence

a = 0, b=0, c=1 are the 1st three terms. All other terms in the Lucas sequence are generated by the sum of their 3 most recent predecessors. Write a program to generate the first n terms of a Lucas Sequence. Input format: The input containing an integer 'n' which denotes the given number Output format: Print the 'n' terms of the Lucas Sequence, separated by a single space. There are no leading or trailing spaces in the output. Refer the sample output for formatting.


Input (stdin)

5

Output (stdout)

0 0 1 1 2

Input (stdin)

3

Output (stdout)

0 0 1

 

Program:

n=int(input())

a=0

b=0

c=1

for i in range(0,n):

  print(a,end=" ")

  d=a+b+c

  a=b

  b=c

  c=d

Q-4 : Collatz problem

The rules for generating Collatz Sequence are: If n is even: n = n / 2 If n is odd: n = 3n + 1 For example, if the starting number is 5 the sequence is: 5 -> 16 -> 8 -> 4 -> 2 -> 1 It has been proved for almost all integers, the repeated application of the above rule will result in a sequence that ends at 1. Input format: The input containing an integer 'n' which denotes the given number Output format: Print the numbers in the sequence and also print the number of times the rule has to be applied in order to reach 1. Refer the sample output for formatting.


Input (stdin)

5

Output (stdout)

5
16
8
4
2
1
5

Input (stdin)

8

Output (stdout)

8
4
2
1
3

 

Program:

import math

b=0

a=int(input())

print(a)

while(a!=1):

  b=b+1

  if(a%2==0):

    a=a//2

    print(a)

  else:

    a=(a*3)+1

    print(a)

print(b)

Q-5 : Trendy Numbers

Write a program to check whether the given number is a trendy number or not. A number is said to be a trendy number if and only if it has 3 digits and the middle digit is divisible by 3. Input format: The input containing an integer 'n' which denotes the given number Output format: If the given number is a trendy number, then print "Trendy Number". Otherwise, print "Not a Trendy Number". Refer the sample output for formatting.


Input (stdin)

791

Output (stdout)

Trendy Number

Input (stdin)

153

Output (stdout)

Not a Trendy Number

 

Program:

n=int(input())

n1=n/10

res=n1%10

rem=res%3

x=round(rem)

if(x==0):

               print("Trendy Number")

else:

               print("Not a Trendy Number")  

Q-6 : Viva on Odd Numbers

A maths teacher asks her students to give 3 examples for positive odd numbers. When the student specifies a correct answer, his/her score is incremented by 1. When the student specifies a positive even number, his/her score is decremented by 0.5. When the student specifies a negative number, he/she will not be given any more chances to correct his or her mistake and his/her score will be decremented by 1. So a student's turn comes to an end when he/she has correctly specified 3 positive odd numbers or when the student has specified a negative number. Few students didn't know the difference between odd numbers and even numbers and they made many mistakes and so it was difficult for the teacher to maintain the scores. The teacher asks for your help. Can you please help her by writing a program to calculate the score? Input Format: Input consists of a list of integers. Output Format: Output consists of a single line. The score needs to be displayed correct to 1 decimal place. Refer sample output for details. [For this exercise, don't worry about duplicate odd numbers. Even if the students specifies the same odd number thrice, it is accepted].


Input (stdin)

1
3
5

Output (stdout)

3.0

 

Program:

count=1

score=0

while count<=3:

               n=int(input())

               if(n%2!=0):

                              count = count+1

                              score = score+1

               else:

                              score = score-0.5

print(float(score))

Q-7 : Kaprekar Number

Consider an n-digit number k. Square it and add the right n digits to the left n or n-1 digits. If the resultant sum is k, then k is called a Kaprekar number. For example, 9 is a Kaprekar number since 92 = 81 & 8+1=9. and 297 is a Kaprekar number since 2972 = 88209 & 88+209 = 297 Input Format: Input consists of a single integer. Output Format: Refer sample output for details.


Input (stdin)

9

Output (stdout)

Kaprekar Number

Input (stdin)

5

Output (stdout)

Not A Kaprekar Number

 

Program:

a=int(input())

n=a

c=0

while(n):

               c=c+1

               n=n//10

sq=a*a

po=pow(10,c)

f=sq%po

s=sq//po

if((f+s)==a):

  print("Kaprekar Number")

else:

  print("Not A Kaprekar Number")

Q-8 : Target Practise

Drona normally trains his disciples using a board which consists of concentric circles. When the student correctly hits the center of the concentric circles, his score is 100. The score gets reduced depending on where the students hits on the board. When the student hits outside the board, his score is 0. Drona will not allow a student to have his food unless he scores 100. Arjuna will always hit the target in his first attempt and he will leave early. Others may take more turns to reach the score of 100. Can you write a program to determine the number of turns a disciple takes to reach the target score of 'n' ? Input Format: Input consists of a list of positive integers. The first integer corresponds to the target score 'n'. Assume that all the other integers input are less than or equal to n. Output Format: Output consists of a single line. Refer sample output for format details.


Input (stdin)

100
4
40
60

Output (stdout)

The number of turns is 3

Input (stdin)

80
4
50
60

Output (stdout)

The number of turns is 3

 

Program:

sum=0

attempt=0

target=int(input())

while(sum<target):

               score=int(input())

               sum=sum+score

               attempt=attempt+1

print("The number of turns is",attempt)

Q-9 : Data Mining

In the University Examinations conducted during the past 5 years, the toppers registration numbers were 7126, 82417914, 7687 and 6657. Your father is an expert in data mining and he could easily infer a pattern in the toppers registration numbers. In all the registration numbers listed here, the sum of the odd digits is equal to the sum of the even digits in the number. He termed the numbers that satisfy this property as Probable Topper Numbers. Write a program to find whether a given number is a probable topper number or not. Input Format: Input consists of a single integer. Output Format: Output consists of a single line. Refer sample output for details.


Input (stdin)

143

Output (stdout)

yes

Input (stdin)

153

Output (stdout)

no

 

Program:

sum=0

sum1=0

n=int(input())

while(n>0):

               n1=n%10

               if(n1%2==0):

                              sum=sum+n1

               else:

                              sum1=sum1+n1

               n=n//10

if(sum==sum1):

               print("yes")

else:

               print("no")

Q-10 : Special number

Wil Wheaton who has filled in the shoes of Professor Proton in the show Professor Proton Fun with Mathematics wanted the kids to learn about Special number.(A 2-digit number is said to be a special number if the sum of sum of its digits and the product of its digits is equal to the number itself. For example, 19 is a special number. The digits in 19 are 1 and 9. The sum of the digits is 10 and the product of the digits is 9. 10+9 = 19.) Can you help Wil to write a Python program to find all special numbers between 2 limits m and n(both inclusive). Assume that m and n are 2-digit numbers.

Input Format:

Input consists of 2 integers m and n.

Output Format:

The output consists of a list of integers.

Refer to sample output for the output format.

Sample Input 1:

11

30

Sample Output 1:

19

29

Explanation:

Between 11 and 30, 19 and 29 are the numbers whose sum of digits and product of digits when added gives the same number itself.

Hence, the two outputs possible are 19 & 29.

Sample Output 1:

11

19

Sample Output 2:

19

Explanation:

Between 11 and 19, 19 is the only number whose sum of digits and product of digits when added gives 19 itself.

Hence, the only output possible is 19.

Input (stdin)

12
45

Output (stdout)

19
29
39

Input (stdin)

11
19

Output (stdout)

19

 

Program:

a=int(input())

b=int(input())

for i in range(a,b+1):

               sum=(i%10)+(i//10)

               prod=(i%10)*(i//10)

               if((sum+prod)==i):

                              print(i)

Q-11 : Print continous Number

Write a program to print all numbers between a and b (a and b inclusive) using a while loop. Input Format: Input consists of 2 integers. The first integer corresponds to a and the second integer corresponds to b. Assume a>=b. Output Format: Refer Sample Input and Output for formatting specifications. [All text in bold corresponds to input and the rest corresponds to output] 

Input (stdin)

4
10


Output (stdout)

4
5
6
7
8
9
10

Input (stdin)

5
15

Output (stdout)

5
6
7
8
9
10
11
12
13
14
15

 

Program:

n1=int(input())

n2=int(input())

for i in range(n1,n2+1):

               print(i)

Q-12 : Print the number in reverse

Write a program to print all numbers between a and b (a and b inclusive) using a while loop. Input Format: Input consists of 2 integers. The first integer corresponds to a and the second integer corresponds to b. Assume a>=b. Output Format: Refer Sample Input and Output for formatting specifications. [All text in bold corresponds to input and the rest corresponds to output] 

Input (stdin)

10
4

Output (stdout)

10
9
8
7
6
5
4

Input (stdin)

5
1

Output (stdout)

5
4
3
2
1

 

Program:

n1=int(input())

n2=int(input())

for  i in reversed(range(n2,n1+1)):

               print(i)

   

#while(n1>=n2):

#             print(n1)

#             n1=n1-1

Q-13 : Count positive or negative

Write a program to that allows the user to enter 'n' numbers and finds the number of positive numbers entered and the number of negative numbers entered using a while loop. Input Format: Input consists of n+1 integers. The first integer corresponds to n. The next n integers correspond to the numbers to be added. Consider 0 to be a positive number. Output Format: Refer Sample Input and Output for formatting specifications. [All text in bold corresponds to input and the rest corresponds to output]


Input (stdin)

4
5
-2
-1
6

Output (stdout)

Number of positive numbers entered is 2 and the sum is 11

Input (stdin)

5
-6
5
-9
4
5

Output (stdout)

Number of positive numbers entered is 3 and the sum is 14

 

Program:

c=0

sum=0

list=[]

n=int(input())

for i in range(0,n):

  a=int(input())

  list.append(a)

for i in range(0,n):

  if(list[i]>0):

    sum=sum+list[i]

    c=c+1

print("Number of positive numbers entered is",c,"and the sum is",sum)

Q-14 : Multiplication table

Write a program to print the multiplication table of an integer n upto m rows using a while loop. Input Format: Input consists of 2 integers. The first integer corresponds to n. The second integer corresponds to m. Output Format: Refer Sample Input and Output for formatting specifications. [All text in bold corresponds to input and the rest corresponds to output]


Input (stdin)

5
4

Output (stdout)

The multiplication table of 5 is
1*5=5
2*5=10
3*5=15
4*5=20

Input (stdin)

2
5

Output (stdout)

The multiplication table of 2 is
1*2=2
2*2=4
3*2=6
4*2=8
5*2=10

 

Program:

n1=int(input())

n2=int(input())

print("The multiplication table of",n1,"is")

for i in range(1,n2+1):

               pro=i*n1

               print("%d"%i+"*""%d"%n1+"=""%d"%pro)

Q-15 : Valid

A number is said to be valid iff it is divisible by 8. Write a program that allows the user to keep entering numbers as long as the input is valid and also displays a count of the valid numbers entered using a while loop. Input Format: Input consists of integers. Output Format: Refer Sample Input and Output for formatting specifications. [All text in bold corresponds to input and the rest corresponds to output]


Input (stdin)

8
16
96
6

Output (stdout)

The number of valid numbers entered is 3

Input (stdin)

24
64
80
4

Output (stdout)

The number of valid numbers entered is 3

 

Program:

c=0

while(1):

               a=int(input())

               if(a%8==0):

                              c+=1

               else:

                              break

print("The number of valid numbers entered is",c)  


